/**
 * Fireblocks API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.6.2
 * Contact: support@fireblocks.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import { RequestArgs, BaseAPI } from '../base';
import { CreateTokenRequestDto } from '../models';
import { TokenLinkDto } from '../models';
import { TokenLinkRequestDto } from '../models';
import { TokensPaginatedResponse } from '../models';
/**
 * TokenizationApi - axios parameter creator
 * @export
 */
export declare const TokenizationApiAxiosParamCreator: (configuration?: Configuration) => {
    /**
     * Return a linked token, with its status and metadata.
     * @summary Return a linked token
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedToken: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Return all linked tokens (paginated)
     * @summary List all linked tokens
     * @param {string} [pageCursor] Page cursor to get the next page
     * @param {number} [pageSize] Number of items per page, requesting more then max will return max items
     * @param {any} [status] A comma separated list of statuses to filter. Default is \&quot;COMPLETED\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedTokens: (pageCursor?: string, pageSize?: number, status?: any, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Facilitates the creation of a new token, supporting both EVM-based and Stellar/Ripple platforms. For EVM, it deploys the corresponding contract template to the blockchain and links the token to the workspace. For Stellar/Ripple, it links a newly created token directly to the workspace without deploying a contract. Returns the token link with status \"PENDING\" until the token is deployed or \"SUCCESS\" if no deployment is needed.
     * @summary Issue a new token
     * @param {CreateTokenRequestDto} createTokenRequestDto
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueNewToken: (createTokenRequestDto: CreateTokenRequestDto, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Link an already existing token (by assetId, collectionId or contractId as refId) to a workspace across EVM, Stellar, or Ripple platforms. The token will be linked to the workspace if it does not already exist.
     * @summary Link a token
     * @param {TokenLinkRequestDto} tokenLinkRequestDto
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    link: (tokenLinkRequestDto: TokenLinkRequestDto, idempotencyKey?: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
    /**
     * Unlink a token. The token will be unlinked from the workspace. The token will not be deleted on chain nor the refId, only the link to the workspace will be removed.
     * @summary Unlink a token
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlink: (id: string, options?: RawAxiosRequestConfig) => Promise<RequestArgs>;
};
/**
 * TokenizationApi - functional programming interface
 * @export
 */
export declare const TokenizationApiFp: (configuration?: Configuration) => {
    /**
     * Return a linked token, with its status and metadata.
     * @summary Return a linked token
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedToken(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenLinkDto>>;
    /**
     * Return all linked tokens (paginated)
     * @summary List all linked tokens
     * @param {string} [pageCursor] Page cursor to get the next page
     * @param {number} [pageSize] Number of items per page, requesting more then max will return max items
     * @param {any} [status] A comma separated list of statuses to filter. Default is \&quot;COMPLETED\&quot;
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedTokens(pageCursor?: string, pageSize?: number, status?: any, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokensPaginatedResponse>>;
    /**
     * Facilitates the creation of a new token, supporting both EVM-based and Stellar/Ripple platforms. For EVM, it deploys the corresponding contract template to the blockchain and links the token to the workspace. For Stellar/Ripple, it links a newly created token directly to the workspace without deploying a contract. Returns the token link with status \"PENDING\" until the token is deployed or \"SUCCESS\" if no deployment is needed.
     * @summary Issue a new token
     * @param {CreateTokenRequestDto} createTokenRequestDto
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueNewToken(createTokenRequestDto: CreateTokenRequestDto, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenLinkDto>>;
    /**
     * Link an already existing token (by assetId, collectionId or contractId as refId) to a workspace across EVM, Stellar, or Ripple platforms. The token will be linked to the workspace if it does not already exist.
     * @summary Link a token
     * @param {TokenLinkRequestDto} tokenLinkRequestDto
     * @param {string} [idempotencyKey] A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    link(tokenLinkRequestDto: TokenLinkRequestDto, idempotencyKey?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenLinkDto>>;
    /**
     * Unlink a token. The token will be unlinked from the workspace. The token will not be deleted on chain nor the refId, only the link to the workspace will be removed.
     * @summary Unlink a token
     * @param {string} id The token link id
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlink(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>>;
};
/**
 * TokenizationApi - factory interface
 * @export
 */
export declare const TokenizationApiFactory: (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) => {
    /**
     * Return a linked token, with its status and metadata.
     * @summary Return a linked token
     * @param {TokenizationApiGetLinkedTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedToken(requestParameters: TokenizationApiGetLinkedTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenLinkDto>;
    /**
     * Return all linked tokens (paginated)
     * @summary List all linked tokens
     * @param {TokenizationApiGetLinkedTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    getLinkedTokens(requestParameters?: TokenizationApiGetLinkedTokensRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokensPaginatedResponse>;
    /**
     * Facilitates the creation of a new token, supporting both EVM-based and Stellar/Ripple platforms. For EVM, it deploys the corresponding contract template to the blockchain and links the token to the workspace. For Stellar/Ripple, it links a newly created token directly to the workspace without deploying a contract. Returns the token link with status \"PENDING\" until the token is deployed or \"SUCCESS\" if no deployment is needed.
     * @summary Issue a new token
     * @param {TokenizationApiIssueNewTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    issueNewToken(requestParameters: TokenizationApiIssueNewTokenRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenLinkDto>;
    /**
     * Link an already existing token (by assetId, collectionId or contractId as refId) to a workspace across EVM, Stellar, or Ripple platforms. The token will be linked to the workspace if it does not already exist.
     * @summary Link a token
     * @param {TokenizationApiLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    link(requestParameters: TokenizationApiLinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<TokenLinkDto>;
    /**
     * Unlink a token. The token will be unlinked from the workspace. The token will not be deleted on chain nor the refId, only the link to the workspace will be removed.
     * @summary Unlink a token
     * @param {TokenizationApiUnlinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     */
    unlink(requestParameters: TokenizationApiUnlinkRequest, options?: RawAxiosRequestConfig): AxiosPromise<void>;
};
/**
 * Request parameters for getLinkedToken operation in TokenizationApi.
 * @export
 * @interface TokenizationApiGetLinkedTokenRequest
 */
export interface TokenizationApiGetLinkedTokenRequest {
    /**
     * The token link id
     * @type {string}
     * @memberof TokenizationApiGetLinkedToken
     */
    readonly id: string;
}
/**
 * Request parameters for getLinkedTokens operation in TokenizationApi.
 * @export
 * @interface TokenizationApiGetLinkedTokensRequest
 */
export interface TokenizationApiGetLinkedTokensRequest {
    /**
     * Page cursor to get the next page
     * @type {string}
     * @memberof TokenizationApiGetLinkedTokens
     */
    readonly pageCursor?: string;
    /**
     * Number of items per page, requesting more then max will return max items
     * @type {number}
     * @memberof TokenizationApiGetLinkedTokens
     */
    readonly pageSize?: number;
    /**
     * A comma separated list of statuses to filter. Default is \&quot;COMPLETED\&quot;
     * @type {any}
     * @memberof TokenizationApiGetLinkedTokens
     */
    readonly status?: any;
}
/**
 * Request parameters for issueNewToken operation in TokenizationApi.
 * @export
 * @interface TokenizationApiIssueNewTokenRequest
 */
export interface TokenizationApiIssueNewTokenRequest {
    /**
     *
     * @type {CreateTokenRequestDto}
     * @memberof TokenizationApiIssueNewToken
     */
    readonly createTokenRequestDto: CreateTokenRequestDto;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TokenizationApiIssueNewToken
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for link operation in TokenizationApi.
 * @export
 * @interface TokenizationApiLinkRequest
 */
export interface TokenizationApiLinkRequest {
    /**
     *
     * @type {TokenLinkRequestDto}
     * @memberof TokenizationApiLink
     */
    readonly tokenLinkRequestDto: TokenLinkRequestDto;
    /**
     * A unique identifier for the request. If the request is sent multiple times with the same idempotency key, the server will return the same response as the first request. The idempotency key is valid for 24 hours.
     * @type {string}
     * @memberof TokenizationApiLink
     */
    readonly idempotencyKey?: string;
}
/**
 * Request parameters for unlink operation in TokenizationApi.
 * @export
 * @interface TokenizationApiUnlinkRequest
 */
export interface TokenizationApiUnlinkRequest {
    /**
     * The token link id
     * @type {string}
     * @memberof TokenizationApiUnlink
     */
    readonly id: string;
}
/**
 * TokenizationApi - object-oriented interface
 * @export
 * @class TokenizationApi
 * @extends {BaseAPI}
 */
export declare class TokenizationApi extends BaseAPI {
    /**
     * Return a linked token, with its status and metadata.
     * @summary Return a linked token
     * @param {TokenizationApiGetLinkedTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    getLinkedToken(requestParameters: TokenizationApiGetLinkedTokenRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TokenLinkDto>>;
    /**
     * Return all linked tokens (paginated)
     * @summary List all linked tokens
     * @param {TokenizationApiGetLinkedTokensRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    getLinkedTokens(requestParameters?: TokenizationApiGetLinkedTokensRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TokensPaginatedResponse>>;
    /**
     * Facilitates the creation of a new token, supporting both EVM-based and Stellar/Ripple platforms. For EVM, it deploys the corresponding contract template to the blockchain and links the token to the workspace. For Stellar/Ripple, it links a newly created token directly to the workspace without deploying a contract. Returns the token link with status \"PENDING\" until the token is deployed or \"SUCCESS\" if no deployment is needed.
     * @summary Issue a new token
     * @param {TokenizationApiIssueNewTokenRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    issueNewToken(requestParameters: TokenizationApiIssueNewTokenRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TokenLinkDto>>;
    /**
     * Link an already existing token (by assetId, collectionId or contractId as refId) to a workspace across EVM, Stellar, or Ripple platforms. The token will be linked to the workspace if it does not already exist.
     * @summary Link a token
     * @param {TokenizationApiLinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    link(requestParameters: TokenizationApiLinkRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<TokenLinkDto>>;
    /**
     * Unlink a token. The token will be unlinked from the workspace. The token will not be deleted on chain nor the refId, only the link to the workspace will be removed.
     * @summary Unlink a token
     * @param {TokenizationApiUnlinkRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenizationApi
     */
    unlink(requestParameters: TokenizationApiUnlinkRequest): Promise<import("../response/fireblocksResponse").FireblocksResponse<void>>;
}
